//
//  main.cpp
//  tema poo
//
//  Created by Lori on 17.12.2018.
//  Copyright Â© 2018 Lori. All rights reserved.
//

#include <iostream>
#include <string>
#include <math.h>
using namespace std;
class Alarma{
protected:
    int nrAlarma;
    const int idMelodie;
    float ora;
    int nr_repetari;
    int nr_mesaje;
    string* mesaje;
public:
    Alarma();
    Alarma(int nrAlarma, int v_idMelodie, float v_ora, int v_nr_repetari, int v_nr_mesaje, string* v_mesaje);
    Alarma(int v_idMelodie, float v_ora=12, int v_nr_repetari=1);
    ~Alarma();
    Alarma(const Alarma& copie);
    //get
    int getNrAlarma();
    int getIdMelodie();
    float getOra();
    int getNrRep();
    int getNrMes();
    string* getMesaje();
    //set
    void setNrAlarma(int n_nrAl);
    void setOra (float n_ora);
    void setNrRep (int n_NrRep);
    void setNrMes (int n_NrMes);
    void setMes (int nrMes, string* n_Mes);
    //afisare
    void afisare();
    Alarma& operator = (const Alarma& a);
    friend ostream& operator << (ostream&out, const Alarma& a);
    string& operator[](int index);
    //pre
    Alarma& operator ++();
    Alarma& operator --();
    //post
    Alarma operator ++(int);
    Alarma operator --(int);
    //
    Alarma& operator +=(const Alarma& a);
    bool operator <(const Alarma& a);
    bool operator >(const Alarma& a);
    bool operator == (const Alarma& a);
    bool operator <=(const Alarma& a);
    bool operator >=(const Alarma& a);
    bool operator !();
    float operator ()();
    explicit operator int();
    //ob este primul
    Alarma operator -(float a);
    Alarma operator +(float a);
    //ob este al doilea
    friend Alarma operator +(float f, Alarma& a);
    friend Alarma operator -(float f, Alarma& a);
    //virtuala pura
    //virtual char getTipAlarma()=0;
};
//interfata
//class Idetalii{
//public: //virtual float getOraAlarma()=0;
//};
//class AlarmaIncendiu:public Alarma, public Idetalii{
//private: int victime;
//public: //char getTipAlarma();
       //float getOraAlarma();
//};
//class AlarmaCutremur:public Alarma, public Idetalii{
//private: int magnitudine;
//public: //char getTipAlarma();
        //float getOraAlarma();
    
//};
int main() {
   
    Alarma a1;
    string mes[]{"Este momentul sa te trezesti","Alarma"};
    Alarma a2(1,1,12.00,2,2,mes);
    Alarma a3(2);
    a1.afisare();
    a2.afisare();
    a3.afisare();
    
    cout<<"get"<<endl;
    cout<<a2.getNrAlarma()<<endl;
    cout<<a2.getIdMelodie()<<endl;
    cout<<a2.getOra()<<endl;
    cout<<a2.getNrRep()<<endl;
    cout<<a2.getNrMes()<<endl;
    string* vector=new string[a2.getNrMes()];
    vector=a2.getMesaje();
    for(int i=0;i<a2.getNrMes();i++)
        cout<<vector[i]<<endl;
    delete[] vector;
    Alarma a4=a2;
    cout<<a4<<endl;
    
    cout<<endl<<"set"<<endl;
    a4.setNrAlarma(3);
    a4.setOra(15);
    a4.setNrRep(4);
    a4.setNrMes(1);
    a4.setMes(1, new string[1]{"alerta"});
    cout<<a4<<endl;
    
    //vector alocat dinamic
    Alarma* a5=new Alarma[4];
    a5[0].setOra(11.15);
    a5[1].setOra(12.20);
    a5[2].setOra(13.30);
    a5[3].setOra(14.40);
    float mediageom=1;
    for(int j=0; j<4; j++)
        mediageom=mediageom*a5[j].getOra();
    float exp=(float)1/4;
    mediageom=pow(mediageom,exp);
    cout<<"media geometrica este:"<<mediageom<<endl;
    delete[] a5;
    
    a1=a3;
    cout<<a3<<endl;
    cout<<"mesajul 1 al alarmei "<<a2.getNrAlarma()<<" este "<<a2[0]<<endl;
    cout<<"operator ++"<<endl;
    a1=a3++;
    a4=++a3;
    cout<<a1<<endl<<a4<<endl;
    cout<<"operator--"<<endl<<a2<<endl;
    a1=a2--;
    a4=--a2;
    cout<<a1<<endl<<a4<<endl<<"operator +="<<endl;
    a1+=a4;
    cout<<a1<<endl;
    cout<<"a1 nu are mesaje: "<< !a1 <<endl;
    cout<<"nr alarma a1 > nr alarma a4: "<< (a1>a4) <<endl;
    cout<<"nr alarma a1 < nr alarma a4: "<< (a1<a4) <<endl;
    cout<<"ora alarma a1 = ora alarma a4: "<< (a1==a4) <<endl;
    cout<<"nr repetari alarma a1 <= nr repetari alarma a4: "<<(a1<=a4)<<endl;
    cout<<"nr repetari alarma a1 >= nr repetari alarma a4: "<<(a1>=a4)<<endl;
    cout<<"nr mesaje 'Alarma' din a2"<<a2()<<endl;
    int nrALARMA=(int)a1;
    cout<<"nr alarma a1: "<<nrALARMA<<endl;
    
    cout<<a1<<endl;
    a2=a1+1;
    a3=a1-1;
    cout<<a2<<endl<<a3<<endl;
    
    cout<<a4<<endl;
    a2=1+a4;
    a3=1-a4;
    cout<<a2<<endl<<a3<<endl;
    
    
    return 0;
}

Alarma::Alarma():idMelodie(0){
    this->nrAlarma=0;
    this->ora=13.05;
    this->nr_repetari=1;
    this->nr_mesaje=0;
    this->mesaje=NULL;
}
Alarma::Alarma(int v_nrAlarma, int v_idMelodie, float v_ora, int v_nr_repetari, int v_nr_mesaje, string* v_mesaje):idMelodie(v_idMelodie){
    this->nrAlarma=v_nrAlarma;
    this->ora=v_ora;
    this->nr_repetari=v_nr_repetari;
    this->nr_mesaje=v_nr_mesaje;
    if(v_mesaje != NULL)
        {this->mesaje=new string[this->nr_mesaje];
            for(int i=0; i<this->nr_mesaje; i++)
                this->mesaje[i]=v_mesaje[i];
        }
    }
Alarma::Alarma(int v_idMelodie, float v_ora, int v_nr_repetari):idMelodie(v_idMelodie){
    this->nrAlarma=-1;
    this->ora=v_ora;
    this->nr_repetari=v_nr_repetari;
    this->nr_mesaje=0;
    this->mesaje=NULL;
    }
Alarma::~Alarma(){
    cout<<"apel destructor"<<endl;
    if (mesaje != NULL)
        delete [] mesaje;
}
Alarma::Alarma(const Alarma& copie):idMelodie(copie.idMelodie){
    this->nrAlarma=copie.nrAlarma;
    this->ora=copie.ora;
    this->nr_repetari=copie.nr_repetari;
    this->nr_mesaje=copie.nr_mesaje;
    this->mesaje=new string[this->nr_mesaje];
    for(int i=0; i<this->nr_mesaje; i++)
        this->mesaje[i]=copie.mesaje[i];
}
int Alarma::getNrAlarma(){
    return this->nrAlarma;
}
int Alarma:: getIdMelodie(){
    return this->idMelodie;
}
float Alarma::getOra(){
    return this->ora;
}
int Alarma::getNrRep(){
    return this->nr_repetari;
}
int Alarma::getNrMes(){
    return this->nr_mesaje;
}
string* Alarma::getMesaje(){
    return this->mesaje;
}
void Alarma::setNrAlarma(int n_nrAl){
    if(n_nrAl>0)
        this->nrAlarma=n_nrAl;
}
void Alarma::setOra(float n_ora){
    this->ora=n_ora;
}
void Alarma::setNrRep(int n_NrRep){
    if(n_NrRep>0)
        this->nr_repetari=n_NrRep;
}
void Alarma::setNrMes (int n_NrMes){
    if(n_NrMes>0)
    this->nr_mesaje=n_NrMes;
}
void Alarma::setMes (int nrMes, string* n_Mes){
    if (this->mesaje != NULL)
        delete[] mesaje;
    if(nrMes>0 && n_Mes != NULL)
        {
            this->mesaje=new string[nrMes];
            for(int i=0; i<nrMes; i++)
                this->mesaje[i]=n_Mes[i];
        }
}
void Alarma::afisare(){
    cout<<"Alarama cu id-ul "<<this->nrAlarma<<" are melodia cu nr "<<' '<<this->idMelodie;
    cout<<" la ora "<<this->ora;
    cout<<" se va repeta de "<<this->nr_repetari<<" ori"<<endl;
    if(this->mesaje!=NULL && this->nr_mesaje>0){
        cout<<" si va afisa mesajele:"<<endl;
        for(int i=0; i<this->nr_mesaje; i++)
            cout<<this->mesaje[i]<<endl;
    }
}
Alarma& Alarma:: operator = (const Alarma& a){
    this->nrAlarma=a.nrAlarma;
    this->ora=a.ora;
    this->nr_repetari=a.nr_repetari;
    this->nr_mesaje=a.nr_mesaje;
    if (this->mesaje!=NULL)
        delete[] mesaje;
    if(a.mesaje!=NULL&&a.nr_mesaje>0)
    {
        this->mesaje=new string[a.nr_mesaje];
        for(int i=0; i<a.nr_mesaje;i++)
            this->mesaje[i]=a.mesaje[i];
    }
    return *this;
}
ostream& operator << (ostream&out, const Alarma& a){
    cout<<"Alarama cu id-ul "<<a.nrAlarma<<" are melodia cu nr "<<' '<<a.idMelodie;
    cout<<" la ora "<<a.ora;
    cout<<" se va repeta de "<<a.nr_repetari<<" ori"<<endl;
    if(a.mesaje!=NULL && a.nr_mesaje>0){
        cout<<" si va afisa mesajele:"<<endl;
        for(int i=0; i<a.nr_mesaje; i++)
            cout<<a.mesaje[i]<<endl;
        }
    return out;
}
string& Alarma::operator[](int index){
    string  a="nu se poate afisa";
    if(index>=0 && index<this->nr_mesaje && this->mesaje!=NULL)
        return this->mesaje[index];
    else return a;
}
Alarma& Alarma::operator++(){
    this->nr_repetari++;
    return *this;
}
Alarma Alarma::operator++(int){
    Alarma copie=*this;
    this->nr_repetari++;
    return copie;
}
Alarma& Alarma::operator--(){
    this->nr_repetari--;
    return *this;
}
Alarma Alarma::operator--(int){
    Alarma copie=*this;
    this->nr_repetari--;
    return copie;
}
Alarma& Alarma::operator+=(const Alarma& a){
    this->nr_repetari=this->nr_repetari + a.nr_repetari;
    return *this;
}
bool Alarma:: operator <(const Alarma& a){
    if(this->nrAlarma<a.nrAlarma) return true;
    else return false;
}
bool Alarma::operator >(const Alarma& a){
    if(this->nrAlarma>a.nrAlarma) return true;
    else return false;
    
}
bool Alarma::operator == (const Alarma& a){
    if(this->ora==a.ora) return true;
    else return false;
    
}
bool Alarma::operator <=(const Alarma& a){
    if(this->nr_repetari<=a.nr_repetari) return true;
    else return false;
    
}
bool Alarma::operator >=(const Alarma& a){
    if(this->nr_repetari>=a.nr_repetari) return true;
    else return false;
    
}
bool Alarma:: operator !(){
    if(this->mesaje==NULL) return false;
    else return true;
}
float Alarma::operator()(){
    float mesaje_e=0;
    if(this->nr_mesaje>0 && this->mesaje!=NULL){
        for(int i=0; i<this->nr_mesaje; i++)
            if(mesaje[i]=="Alarma") mesaje_e++;
        return mesaje_e;
    }
    else return mesaje_e;
    }
Alarma Alarma::operator -(float a){
    Alarma copie=*this;
    copie.nr_repetari=copie.nr_repetari - a;
    return copie;
}
Alarma Alarma::operator +(float a){
    Alarma copie=*this;
    copie.nr_repetari=copie.nr_repetari + a;
    return copie;
    
}
Alarma operator +(float f, Alarma& a){
    Alarma copie=a;
    copie.nr_repetari=copie.nr_repetari + f;
    return copie;
    
}
Alarma operator -(float f, Alarma& a){
    Alarma copie=a;
    copie.nr_repetari=copie.nr_repetari + f;
    return copie;
    
}
Alarma::operator int(){
    return this->nrAlarma;
}
